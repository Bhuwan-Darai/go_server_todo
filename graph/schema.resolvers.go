package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/bhuwan-darai/crud/graph/model"
	"github.com/bhuwan-darai/crud/prisma/db"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	user, err := r.DB.User.CreateOne(
		db.User.Name.Set(name),
		db.User.Email.Set(email),
		db.User.CreatedAt.Set(time.Now()),
	).Exec(ctx)
	if err != nil {
		if strings.Contains(err.Error(), "Unique constraint failed") {
			return nil, fmt.Errorf("email already exists")
		}
		return nil, fmt.Errorf("failed to create user: %v", err)
	}
	return &model.User{
		ID:        strconv.Itoa(user.ID),
		Name:      user.Name,
		Email:     user.Email,
		CreatedAt: user.CreatedAt.String(),
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name *string, email *string) (*model.User, error) {
	// Convert string ID to int
	userID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %v", err)
	}

	// Build update parameters
	updateParams := []db.UserSetParam{}

	if name != nil {
		updateParams = append(updateParams, db.User.Name.Set(*name))
	}

	if email != nil {
		updateParams = append(updateParams, db.User.Email.Set(*email))
	}

	// If no fields to update, return error
	if len(updateParams) == 0 {
		return nil, fmt.Errorf("no fields provided for update")
	}

	// Update the user
	user, err := r.DB.User.FindUnique(
		db.User.ID.Equals(userID),
	).Update(updateParams...).Exec(ctx)

	if err != nil {
		if strings.Contains(err.Error(), "Record to update not found") {
			return nil, fmt.Errorf("user not found")
		}
		if strings.Contains(err.Error(), "Unique constraint failed") {
			return nil, fmt.Errorf("email already exists")
		}
		return nil, fmt.Errorf("failed to update user: %v", err)
	}

	return &model.User{
		ID:        strconv.Itoa(user.ID),
		Name:      user.Name,
		Email:     user.Email,
		CreatedAt: user.CreatedAt.String(),
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	// Convert string ID to int
	userID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %v", err)
	}

	// First, get the user to return it after deletion
	user, err := r.DB.User.FindUnique(
		db.User.ID.Equals(userID),
	).Exec(ctx)

	if err != nil {
		if strings.Contains(err.Error(), "No User found") {
			return nil, fmt.Errorf("user not found")
		}
		return nil, fmt.Errorf("failed to find user: %v", err)
	}

	// Delete the user
	_, err = r.DB.User.FindUnique(
		db.User.ID.Equals(userID),
	).Delete().Exec(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to delete user: %v", err)
	}

	return &model.User{
		ID:        strconv.Itoa(user.ID),
		Name:      user.Name,
		Email:     user.Email,
		CreatedAt: user.CreatedAt.String(),
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.DB.User.FindMany().Exec(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch users: %v", err)
	}

	var result []*model.User
	for _, user := range users {
		result = append(result, &model.User{
			ID:        strconv.Itoa(user.ID),
			Name:      user.Name,
			Email:     user.Email,
			CreatedAt: user.CreatedAt.String(),
		})
	}

	return result, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	// Convert string ID to int
	userID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %v", err)
	}

	user, err := r.DB.User.FindUnique(
		db.User.ID.Equals(userID),
	).Exec(ctx)

	if err != nil {
		if strings.Contains(err.Error(), "No User found") {
			return nil, fmt.Errorf("user not found")
		}
		return nil, fmt.Errorf("failed to fetch user: %v", err)
	}

	return &model.User{
		ID:        strconv.Itoa(user.ID),
		Name:      user.Name,
		Email:     user.Email,
		CreatedAt: user.CreatedAt.String(),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
